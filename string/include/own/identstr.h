/*!
\file
\brief Заголовочный файл с описанием класса "Строка-идентификатор"

Данный файл содержит в себе определения производного
от "Строка" класса "Строка-идентификатор"
*/
#ifndef OWN_STRING_IDENTSTR_H
#define OWN_STRING_IDENTSTR_H

#include "string.h"

namespace own {

/*!
\brief Производный от "Строка" класс "Строка-идентификатор"

Строки данного класса строятся по правилам записи идентификаторов
в СИ, и могут включать в себя только те символы, которые могут входить
в состав Си-идентификаторов. Если исходные данные противоречат правилам
записи идентификатора, то создается пустая "Строка-идентификатор".
*/
class IdentStr : public String
{
public:
    /*!
    Конструктор без параметров (длина строки = 0) или принимающий длину строки
    \param[in] len Длина строки (по умолчанию 0)
    */
	IdentStr(int = 0);

    /*!
    Конструктор, принимающий в качестве параметра Си-строку (заканчивается нулевым байтом)
    \param[in] s Си-строка
    */
	IdentStr(const char*);

    /*!
    Конструктор копирования
    \param[in] from Исходный объект
    */
	IdentStr(const IdentStr&);

    /*!
    Деструктор
    */
	~IdentStr();

	/*!
	Подсчет количества цифр в строке
	*/
	int getDigitsNum();

	/*! 
	Оператор присваивания
	*/
	IdentStr& operator=(const IdentStr&);

	/*! 
	Объединение строк
	\result Строка, содержащая все символы первой строки и символы второй строки, отсутствующие в первой
	*/
    friend IdentStr operator&(const IdentStr&, const IdentStr&);

	/*! 
	Объединение строк
	\result Строка, содержащая все символы первой строки и символы второй строки, отсутствующие в первой
	*/
    friend IdentStr operator&(const char*, const IdentStr&);

	/*! 
	Объединение строк
	\result Строка, содержащая все символы первой строки и символы второй строки, отсутствующие в первой
	*/
    friend IdentStr operator&(const IdentStr&, const char*);
};

}
#endif // OWN_STRING_IDENTSTR_H
